# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

[board_pins hardware]
aliases:
    # Axis Steppers
    X_ENABLE=PB14, X_STEP=PB13, X_DIR=PB12,
    Y_ENABLE=PB11, Y_STEP=PB10, Y_DIR=PB2,
    Z_ENABLE=PB1,  Z_STEP=PB0,  Z_DIR=PC5,
    # Extruder
    E_ENABLE=PD1, E_STEP=PB3, E_DIR=PB4,
    # Stepper UART
    UART_TX=PC10, UART_RX=PC11,
    # Endstops
    X_STOP=PC0, Y_STOP=PC1, Z_STOP=PC2, E0_STOP=PC15,
    # Heaters
    HB=PC9, E0=PC8,
    # Thermistors
    THB=PC4, TH0=PA0,
    # Fans
    FAN0=PC6, FAN1=PC7, FAN2=PB15,
    # Z probe
    ZPROBE_SENSOR=PC14, ZPROBE_CONTROL=PA1,
    # EXP1 header
    EXP1=PB5,  EXP3=PA9,   EXP5=PA10, EXP7=PB8, EXP9=<GND>,
    EXP2=PA15, EXP4=<RST>, EXP6=PB9,  EXP8=PD6, EXP10=<5V>,
    # I/O
    IO_1=PD0, IO_2=PD2, IO_3=PD3, IO_4=PD4, IO_5=PD5,
    # Neopixel
    NEOPIXEL_1=<GND>, NEOPIXEL_2=PA8, NEOPIXEL_3=<PWR>,
    # USB
    USB_DATA_POS=PA12, USB_DATA_NEG=PA11,
    # SPI1
    SPI_NSS=PA4, SPI_MOSI=PA7, SPI_CLK=PA5, SPI_MISO=PA6, SPI_DET=PC3

[board_pins human_readable_names]
aliases:
    HOTEND_HEATER=E0, HOTEND_THERMISTOR=TH0,
    BED_HEATER=HB, BED_THERMISTOR=THB,
    EXTRUDER_ENABLE=E_ENABLE, EXTRUDER_STEP=E_STEP, EXTRUDER_DIR=E_DIR,
    FAN_CONTROLLER=FAN0, FAN_HEATBREAK=FAN1, FAN_PARTCOOLING=FAN2,

[stepper_x]
step_pin: X_STEP
dir_pin: !X_DIR
enable_pin: !X_ENABLE
microsteps: 16
rotation_distance: 40
endstop_pin: ^X_STOP
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: UART_RX
tx_pin: UART_TX
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: Y_STEP
dir_pin: !Y_DIR
enable_pin: !Y_ENABLE
microsteps: 16
rotation_distance: 40
endstop_pin: ^Y_STOP
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: UART_RX
tx_pin: UART_TX
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: Z_STEP
dir_pin: Z_DIR
enable_pin: !Z_ENABLE
microsteps: 16
rotation_distance: 8
endstop_pin: ^Z_STOP
position_endstop: 0.0
position_max: 250

[tmc2209 stepper_z]
uart_pin: UART_RX
tx_pin: UART_TX
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: EXTRUDER_STEP
dir_pin: !EXTRUDER_DIR
enable_pin: !EXTRUDER_ENABLE
microsteps: 16
rotation_distance: 32.830000
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: HOTEND_HEATER
sensor_type: EPCOS 100K B57560G104F
sensor_pin: HOTEND_THERMISTOR
control: pid
pid_Kp: 24.956
pid_Ki: 1.364
pid_Kd: 114.175
min_temp: 0
max_temp: 270

[tmc2209 extruder]
uart_pin: UART_RX
tx_pin: UART_TX
uart_address: 3
run_current: 0.8
stealthchop_threshold: 999999

[heater_bed]
heater_pin: BED_HEATER
sensor_type: EPCOS 100K B57560G104F
sensor_pin: BED_THERMISTOR
control: pid
pid_Kp: 67.716
pid_Ki: 0.773
pid_Kd: 1482.980
min_temp: 0
max_temp: 115

[fan]
pin: FAN_PARTCOOLING

[heater_fan heatbreak_cooling_fan]
pin: FAN_HEATBREAK

[controller_fan]
pin: FAN_CONTROLLER

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_420013000250415339373620-if00
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[display]
lcd_type: st7920
cs_pin: EXP7
sclk_pin: EXP6
sid_pin: EXP8
encoder_pins: ^EXP5, ^EXP3
click_pin: ^!EXP2

[endstop_phase]
[endstop_phase stepper_z]

[exclude_object]
[gcode_arcs]

[bed_screws]
screw1:  29, 37
screw2: 200, 37
screw3:  29,207
screw4: 200,207

# [bed_mesh]
# horizontal_move_z: 10
# speed: 150
# mesh_min: 32, 36
# mesh_max: 150, 206
# probe_count: 5,5
# algorithm: bicubic
# 
# [bltouch]
# sensor_pin: ^ZPROBE_SENSOR
# control_pin: ZPROBE_CONTROL
# # speed: 10
# # lift_speed: 20
# x_offset: -46 # manually checked
# y_offset: -6 # manually checked
# z_offset: 1.5 # manually calibrated
# # samples: 5
# # pin_up_reports_not_triggered: False

[virtual_sdcard]
path: /var/lib/moonraker/gcodes

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
